<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Animated Spreadsheet with Sticky Headers</title>
  <style>
    :root {
      --item-height: 50px;
      --item-width: 800px;
      --animation-duration: 0.5s;
    }
    .list-container {
      position: relative;
      height: calc(var(--item-height) * 7);
      width: 100%;
      margin: 20px auto;
      overflow: hidden;
    }
    table {
      empty-cells: show;
      table-layout: fixed;
      white-space: nowrap;
      width: 100%;
    }
    

    .header-row th {
      width: 2%; /* First column width */
      max-width: 2%; /* Prevents exceeding 4% */
      min-width: 2%;
    }
    .header-row th:nth-child(n+2) { /* All other columns */
      width: 9%;
      max-width: 9%; /* Prevents exceeding 12% */
      min-width: 9%;
      
    }
    .list-item {
      position: absolute;
      height: var(--item-height);
      width: 100%;
      transition: all var(--animation-duration) ease;
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 16px;
    }
    .list-item td {
      empty-cells: show;
      padding: 0 10px;
      text-align: center;
      border: 1px solid #ccc;
      background-color: aqua !important;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    .list-item td:nth-child(1) {
      max-width: 2%;
      min-width: 2%;
    }

    .list-item td:nth-child(n+2) {
      max-width: 9%;
      min-width: 9%;
    }
    .sticky-header {
      position: sticky;
      top: 0;
      background-color: #fff;
      z-index: 1; /* Ensure the header is above the items */
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .header-row th {
      font-weight: normal; 
      background-color: transparent;
    }
    .button-container {
      display: flex;
      justify-content: center; /* Center the buttons horizontally */
      margin: 20px 0; /* Add some margin for spacing */
    }
    .button-container button {
      margin: 0 10px; /* Add space between buttons */
    }
  </style>
</head>
<body>
  <div id="list-container" class="list-container">
    <table id="data-table">
      <thead>
        <tr class="header-row">
        </tr>
      </thead>
      <tbody id="list-body"></tbody>
    </table>
    <script>
    function createTableHeader() {
      const headerRow = document.querySelector('.header-row');
      headerRow.innerHTML = ''; // Clear existing headers
      columnHeaders.forEach((header, index) => {
        const th = document.createElement('th');
        th.textContent = header;
        th.style.width = `${columnWidths[index]}%`;
        th.style.maxWidth = `${columnWidths[index]}%`;
        th.style.minWidth = `${columnWidths[index]}%`;
        headerRow.appendChild(th);
      });
    }
    </script>
  </div>
  <!-- Button Container -->
  <div class="button-container">
    <button id="animate-btn">Animate Up</button>
    <button id="animate-down-btn">Animate Down</button>
    <button id="insert-below-btn">Insert Below</button>
    <button id="insert-above-btn">Insert Above</button>
  </div>
  <script>
    const columnHeaders = ['Sr No.', 'A', 'B', 'C','D'];
    const columnWidths = [2, 10,10,60,10]; // in percentages

    // Add this line to call the function
    createTableHeader();

    const listContainer = document.getElementById('list-container');
    const animateBtn = document.getElementById('animate-btn');
    const animateDownBtn = document.getElementById('animate-down-btn');
    const insertBelowBtn = document.getElementById('insert-below-btn');
    const insertAboveBtn = document.getElementById('insert-above-btn');
    const listBody = document.getElementById('list-body');
    const itemHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--item-height'));
    const items = Array.from({length: 9}, (_, i) => 
      Array.from({length: columnHeaders.length - 1}, (_, j) => `Num${(i+1)*10 + (j+1)}`)
    );
    let currentIndex = items.length-3;
    let isAnimating = false;
    function createListItems() {
      for (let i = 0; i < 7; i++) {
        const item = document.createElement('tr');
        item.className = 'list-item';
        item.style.top = `${i * itemHeight}px`;
        item.style.opacity = i === 2 || i === 4 ? 0.5 : i === 3 ? 1 : i === 1 || i === 5 ? 0.25 : 0;
        
        columnHeaders.forEach((_, index) => {
          const cell = document.createElement('td');
          cell.style.width = `${columnWidths[index]}%`;
          cell.style.maxWidth = `${columnWidths[index]}%`;
          cell.style.minWidth = `${columnWidths[index]}%`;
          cell.innerHTML = ' ';
          
          if (index === 0) {
            // Make serial number cell non-focusable
            cell.setAttribute('tabindex', '-1');
          } else if (i === 3) {
            cell.setAttribute('contenteditable', 'true');
            cell.addEventListener('blur', (event) => {
              const rowOffset = (currentIndex + 3) % items.length; // Center row index is 3
              items[rowOffset][index] = event.target.textContent;
            });
            cell.addEventListener('focus', (event) => {
              const range = document.createRange();
              range.selectNodeContents(event.target);
              const selection = window.getSelection();
              selection.removeAllRanges();
              selection.addRange(range);
            });
          } else {
            cell.setAttribute('contenteditable', 'false');
          }
          
          item.appendChild(cell);
        });
        
        listBody.appendChild(item);
      }
      updateListItems();
      // Set focus on the first editable cell of the current row (center row)
      const firstEditableCell = listBody.querySelectorAll('.list-item')[3].children[1];
      firstEditableCell.focus();
    }    function updateListItems() {
      const listItems = document.querySelectorAll('.list-item');
      listItems.forEach((item, index) => {
        const cells = item.getElementsByTagName('td');
        const rowData = items[(currentIndex + index) % items.length];
        // Update the serial number cell
        cells[0].textContent = (currentIndex + index) % (items.length) + 1;
        for (let i = 1; i < cells.length; i++) { // Start from 1 to skip serial number cell
          cells[i].textContent = rowData[i - 1] || '\u00A0'; // Use rowData[i - 1] to align correctly
        }
      });
    }
    function animateList() {
      if (isAnimating) return;
      isAnimating = true;
      // Get the currently focused cell index
      const activeElement = document.activeElement;
      let focusedCellIndex = -1;
      let focusedRowIndex = -1;
      // Ensure focus is on a cell, otherwise set it to the center cell
      if (activeElement.tagName === 'TD') {
        const currentRow = activeElement.parentElement; // Get the current row
        const cells = currentRow.getElementsByTagName('td'); // Get all cells in the current row
        focusedCellIndex = Array.prototype.indexOf.call(cells, activeElement); // Get the index of the current cell
        focusedRowIndex = Array.prototype.indexOf.call(listBody.children, currentRow); // Get the index of the current row
      } else {
        // Focus the first cell of the center row if no cell is focused
        const centerRow = listBody.querySelectorAll('.list-item')[3];
        const firstCell = centerRow.firstChild;
        firstCell.focus();
        focusedCellIndex = 0; // Set to the first cell index
        focusedRowIndex = 3; // Center row index
      }
      const listItems = document.querySelectorAll('.list-item');
      listItems.forEach((item, index) => {
        item.style.top = `${(index - 1) * itemHeight}px`;
        item.style.opacity = index === 4 ? 1 : index === 3 || index === 5 ? 0.5 : index === 2 || index === 6 ? 0.25 : 0;
      });
      setTimeout(() => {
        currentIndex = (currentIndex + 1) % items.length;
        updateListItems();
        listItems.forEach((item, index) => {
          item.style.transition = 'none';
          item.style.top = `${index * itemHeight}px`;
          item.style.opacity = index === 3 ? 1 : index === 2 || index === 4 ? 0.5 : index === 1 || index === 5 ? 0.25 : 0;
        });
        setTimeout(() => {
          listItems.forEach(item => item.style.transition = '');
          isAnimating = false;
          // Restore focus to the previously focused cell
          if (focusedCellIndex !== -1 && focusedRowIndex !== -1) {
            const newRow = listItems[3]; // Center row index is still 3
            const newCell = newRow.getElementsByTagName('td')[focusedCellIndex];
            newCell.focus();
          }
        }, 50);
      }, parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--animation-duration')) * 1000);
    }
    function animateListDown() {
      if (isAnimating) return;
      isAnimating = true;
      // Get the currently focused cell index
      const activeElement = document.activeElement;
      let focusedCellIndex = -1;
      let focusedRowIndex = -1;
      // Ensure focus is on a cell, otherwise set it to the center cell
      if (activeElement.tagName === 'TD') {
        const currentRow = activeElement.parentElement; // Get the current row
        const cells = currentRow.getElementsByTagName('td'); // Get all cells in the current row
        focusedCellIndex = Array.prototype.indexOf.call(cells, activeElement); // Get the index of the current cell
        focusedRowIndex = Array.prototype.indexOf.call(listBody.children, currentRow); // Get the index of the current row
      } else {
        // Focus the first cell of the center row if no cell is focused
        const centerRow = listBody.querySelectorAll('.list-item')[3];
        const firstCell = centerRow.firstChild;
        firstCell.focus();
        focusedCellIndex = 0; // Set to the first cell index
        focusedRowIndex = 3; // Center row index
      }
      const listItems = document.querySelectorAll('.list-item');
      listItems.forEach((item, index) => {
        item.style.top = `${(index + 1) * itemHeight}px`;
        item.style.opacity = index === 2 ? 1 : index === 3 || index === 1 ? 0.5 : index === 4 || index === 0 ? 0.25 : 0;
      });
      setTimeout(() => {
        currentIndex = (currentIndex - 1 + items.length) % items.length; // Move to the previous index
        updateListItems();
        listItems.forEach((item, index) => {
          item.style.transition = 'none';
          item.style.top = `${index * itemHeight}px`;
          item.style.opacity = index === 3 ? 1 : index === 2 || index === 4 ? 0.5 : index === 1 || index === 5 ? 0.25 : 0;
        });
        setTimeout(() => {
          listItems.forEach(item => item.style.transition = '');
          isAnimating = false;
          // Restore focus to the previously focused cell
          if (focusedCellIndex !== -1 && focusedRowIndex !== -1) {
            const newRow = listItems[3]; // Center row index is still 3
            const newCell = newRow.getElementsByTagName('td')[focusedCellIndex];
            newCell.focus();
          }
        }, 50);
      }, parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--animation-duration')) * 1000);
    }
    function insertRowBelow() {
      const listItems = document.querySelectorAll('.list-item');
      const currentRow = (currentIndex + 3) % items.length; // Center row index
      const newRow = Array.from({length: 8}, (_, j) => `Num${(items.length + 1) * 10 + (j + 1)}`); // Create a new row with default values
      // Insert the new row into the items array
      items.splice(currentRow + 1, 0, newRow); // Insert after the current row
      // Update the list items to reflect the new data
      updateListItems();
    }
    function insertRowAbove() {
      const listItems = document.querySelectorAll('.list-item');
      const currentRow = (currentIndex + 3) % items.length; // Center row index
      const newRow = Array.from({length: 8}, (_, j) => `Num${(items.length + 1) * 10 + (j + 1)}`); // Create a new row with default values
      // Insert the new row into the items array
      items.splice(currentRow, 0, newRow); // Insert before the current row
      // Update the list items to reflect the new data
      updateListItems();
    }
    // Add event listener for keydown events to handle arrow keys
    document.addEventListener('keydown', (event) => {
      if (event.key === 'ArrowUp' || event.key === 'ArrowDown' || event.key === 'Enter') {
        const activeElement = document.activeElement;
        if (activeElement.tagName === 'TD' && activeElement.isContentEditable) {
          // Update the data array with the current cell content
          const currentRow = activeElement.parentElement;
          const rowIndex = Array.from(listBody.children).indexOf(currentRow);
          const cellIndex = Array.from(currentRow.children).indexOf(activeElement) - 1;
          const dataIndex = (currentIndex + rowIndex) % items.length;
          items[dataIndex][cellIndex] = activeElement.textContent;
        }

        if (event.key === 'ArrowUp') {
          animateListDown();
        } else {
          // Both ArrowDown and Enter will trigger animateList()
          animateList();
        }
    
        event.preventDefault();

        // After animation, select all content in the newly focused cell
        setTimeout(() => {
          const focusedCell = document.activeElement;
          if (focusedCell.tagName === 'TD') {
            const range = document.createRange();
            range.selectNodeContents(focusedCell);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
          }
        }, parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--animation-duration')) * 1000);
      }

      if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
        const activeElement = document.activeElement;
        if (activeElement.tagName === 'TD') {
          const currentRow = activeElement.parentElement;
          const cells = Array.from(currentRow.children);
          const currentIndex = cells.indexOf(activeElement);
          let newIndex;

          if (event.key === 'ArrowLeft') {
            newIndex = Math.max(1, currentIndex - 1); // Change 0 to 1 here
          } else {
            newIndex = Math.min(cells.length - 1, currentIndex + 1);
          }

          cells[newIndex].focus();
          event.preventDefault();
        }
      }
    });    createListItems();
    animateBtn.addEventListener('mousedown', animateList);
    animateDownBtn.addEventListener('mousedown', animateListDown);
    insertBelowBtn.addEventListener('click', insertRowBelow);
    insertAboveBtn.addEventListener('click', insertRowAbove);
  </script>
</body>
</html>

